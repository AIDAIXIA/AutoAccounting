

plugins {
    alias(libs.plugins.androidApplication)
    alias(libs.plugins.kotlinAndroid)
    id 'com.google.devtools.ksp' version "1.9.21-1.0.15"
    id "com.bugsnag.android.gradle"
    id 'dev.rikka.tools.autoresconfig'
}

android {
    namespace 'net.ankio.auto'
    compileSdk 34
    defaultConfig {
        applicationId "net.ankio.auto"
        minSdk 28
        targetSdk 34
        versionCode 202
        versionName "初啼 4.0.0-beta2"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        flavorDimensions += "version"
        productFlavors {
            create("xposed") {
                dimension = "version"
                applicationIdSuffix = ".xposed"
                versionNameSuffix = " - Xposed"
            }
           /* create("helper") {
                dimension = "version"
                applicationIdSuffix = ".helper"
                versionNameSuffix = " - 无障碍"
            }*/
        }
        externalNativeBuild {
            cmake {
                cppFlags ''
            }
        }
    }
    buildFeatures {
        viewBinding true
        buildConfig true
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "app.apk"
                }
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.22.1'
        }
    }
    autoResConfig {
        generateClass = true
        generatedClassFullName = "net.ankio.utils.LangList"
        generateRes = true
        generatedResPrefix = null
        generatedArrayFirstItem = "SYSTEM"
        generateLocaleConfig = true
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE.md'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/gson/FieldAttributes.txt'
        exclude 'META-INF/gson/LongSerializationPolicy.txt'
        exclude 'META-INF/gson/annotations.txt'
    }

}

task extractArraysToTxt {
    doLast {
        // 检查当前构建的 flavor 是否是 'xposed'
        if (gradle.startParameter.taskNames.any { it.contains("Xposed") }) {
            // 指定 arrays.xml 文件的路径
            def arraysXmlFile = file('src/xposed/res/values/arrays.xml')
            // 指定输出的 txt 文件路径
            def outputTxtFile = file('src/xposed/assets/shell/apps.txt')

            // 确保输出目录存在
            outputTxtFile.parentFile.mkdirs()

            // 读取 arrays.xml 文件并提取数据
            def arraysXmlContent = arraysXmlFile.text
            def extractedData = arraysXmlContent.replaceAll(/<.*?>/, '').trim() // 简单地移除 XML 标签

            // 写入到 txt 文件
            outputTxtFile.text = extractedData
        }
    }
}

// 确保在构建 APK 之前运行此任务
preBuild.dependsOn extractArraysToTxt

dependencies {

    implementation libs.core.ktx
    implementation libs.kotlinx.coroutines.android
    implementation libs.appcompat
    implementation libs.material
    implementation libs.androidx.navigation.fragment.ktx
    implementation libs.androidx.navigation.ui.ktx
    implementation libs.androidx.browser
    implementation libs.androidx.activity
    implementation libs.androidx.constraintlayout
    implementation project(":common")
    testImplementation libs.junit
    androidTestImplementation libs.androidx.test.ext.junit
    androidTestImplementation libs.espresso.core
    //主题库
    implementation libs.themeEngine
    //状态栏
    implementation libs.ultimateBarX
    //Html转换
    implementation libs.html.ktx
    //gson
    implementation libs.gson
    //toast
    implementation libs.toaster
    //xp依赖
    compileOnly libs.xposed
    //room数据库
    implementation libs.androidx.room.runtime.v251
    ksp libs.androidx.room.compiler.v251
    implementation libs.androidx.room.ktx
    //flexbox
    implementation libs.flexbox
    //圆角
    implementation libs.round
    //js引擎
    implementation libs.rhino
    //bug
    implementation libs.bugsnag.android
    //okhttp
    implementation libs.okhttp
    //常用的工具类


    implementation libs.remotepreferences
}